package lesson022.StreamUygulama;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Market {

	EUrun[] product = EUrun.values();
	List<Urun> urunler = new ArrayList<>();
	Map<String, Double> urunMap = new HashMap<>();
	Map<String, Integer> sepetMap = new HashMap<>();

	//

	public Market() {
		urunOlustur();
		urunFiyatMapOlustur();
	}

	public void urunOlustur() {
		// product arrayini liste (internetten araştırın) çevireceğiz
		// daha sonra stream'e çevireceğiz ve işlem yapabilecek
		// duruma geleceğiz
		// urun nesnesi oluştururken değerleri ENUM içinden alacağız

		// arrayi direkt stream'e çeviremiyoruz. bu yüzden;
		urunler = Arrays.asList(product) // liste
				.stream() // stream
				.map(urun -> new Urun(urun.name(), urun.fiyat)).collect(Collectors.toList());
	}

	public void urunleriListele() {
		urunler.forEach(Urun::bilgileriGoster);
//		urunler.forEach(System.out::println);
//		urunler.forEach(urun -> System.out.println(urun.getName()));
	}

	// urunFiyatListesiOlustur
	public void urunFiyatMapOlustur() {

//		for (Urun urun : urunler) {
//			urunMap.put(urun.getName(), urun.getPrice());
//		}

		urunMap = urunler.stream().collect(Collectors.toMap(urun -> urun.getName(), urun -> urun.getPrice()));
	}

	public void fiyatListesiYazdir() {
		urunMap.forEach((key, value) -> System.out.println(key + " " + value));
//		urunMap.entrySet().forEach(System.out::println);
	}

	// fiyatı 50'den büyük olan ürünleri listeleyim (urunMap uzerinden erişelim)
	public void fiyati50denBuyukOlanlar() {
		List<Entry<String, Double>> ellidenBuyuk = urunMap.entrySet().stream().filter(x -> x.getValue() > 50)
				.collect(Collectors.toList());
		System.out.println("Fiyatı 50'den büyük olanlar: " + ellidenBuyuk);

	}

	public void fiyati50denBuyukOlanlar2() {
		List<String> ellidenBuyuk2 = urunMap.entrySet().stream().filter(entry -> entry.getValue() > 50)
				.map(Entry::getKey).collect(Collectors.toList());
		System.out.println("Fiyatı 50'den büyük olanlar: " + ellidenBuyuk2);

	}

	// fiyatı 50'den büyük olan ürünlerin fiyatlarının ortalamasını bulalım
	public void ortalama() {
		List<Urun> ellidenBuyukler = urunler.stream().filter(x -> x.getPrice() > 50).collect(Collectors.toList());

		ellidenBuyukler.stream().mapToDouble(i -> i.getPrice()).average()
				.ifPresent(ortalama -> System.out.println("Average found is " + ortalama));

	}

	public void ortalama2() {
		List<Urun> ellidenBuyukler2 = urunler.stream().filter(x -> x.getPrice() > 50).collect(Collectors.toList());

		double result = ellidenBuyukler2.stream().collect(Collectors.averagingDouble(Urun::getPrice));
		System.out.println(result);
	}
	
	// sepeteUrunEkle metodu yazalım
	
	public void sepeteUrunEkle() {
		
		Scanner scanner = new Scanner(System.in);
		System.out.println("Eklemek istediğiniz ürün:");
		String urun = scanner.nextLine();
		
		
		if(urunMap.containsKey(urun)) {
			if (sepetMap.containsKey(urun)) {
				sepetMap.put(urun, sepetMap.get(urun) +1);
			}
			else {
				sepetMap.put(urun, 1);
				System.out.println(urun + " sepete eklendi");
			}
		}
		else {
			System.out.println("urun yok");
		}
		

	}

}
